/*!
\copyright  Copyright (c) 2019-2023 Qualcomm Technologies International, Ltd.\n
            All Rights Reserved.\n
            Qualcomm Technologies International, Ltd. Confidential and Proprietary.
\file
\addtogroup device_database_serialiser
\brief      Defines the device properties to be used by the Device Database API.

            \note This file may be autogenerated in future. Device properties 
            belong to the Application, Services and Domains. There will
            need to be a build time system for handling this requirement. 
*/

#ifndef DEVICE_PROPERTIES_H_
#define DEVICE_PROPERTIES_H_

#include <bdaddr.h>
#include <csrtypes.h>
#include <device.h>
#include <audio_sources_list.h>
#include <voice_sources_list.h>
#include <volume_types.h>
#include <handset_bredr_context.h>
#include <handset_ble_context.h>

/*! @{ */

/*! \brief device properties

    \note Alignment of this enum must be maintained when DFU is applied.
          Do not remove or replace properties in this enum. Deprecated
          properties may be renamed.

    \note The device_property_reserved_1, _2 and _3 entries exist for backward compatibility and should not normally
          be used. The device_property_supported_profiles should be used instead. The replacement has been added when
          going from a uint8 to uint16 to store profile values, and had to be added to the end. This allows for upgrade
          from the old versions to the new on a DFU.

    \note New device properties are \b not automatically persisted on boot.
          To persist a new property it is neccesary to 
            - Add a field in device structure 
              - File bt_device.typedef
            - Convert to/from structure and device property
              - BtDevice_GetDeviceData()
              - BtDevice_SetDeviceData()
            - Update code to serialise and deserialise
              The deserialise function should be versioned so devices can be updated
              - BtDevice_SerialisePddu()
              - deser_fns
 */
typedef enum
{
    device_property_bdaddr = 0,
    device_property_audio_volume,
    device_property_hfp_profile,
    device_property_type,
    device_property_link_mode,
    device_property_reserved_1,
    device_property_reserved_2,
    device_property_connected_profiles,
    device_property_reserved,
    device_property_flags,
    device_property_sco_fwd_features,
    device_property_mru,
    device_property_battery_server_config_l,
    device_property_battery_server_config_r,
    device_property_gatt_server_config,
    device_property_gatt_server_services_changed,
    device_property_profiles_connect_order,
    device_property_profiles_disconnect_order,
    device_property_profile_request_index,
    device_property_user_account_key_index,
    device_property_user_account_keys,
    device_property_fast_pair_personalized_name,
    device_property_voice_assistant,
    device_property_device_test_service,
    device_property_supported_profiles,
    device_property_reserved_3,
    device_property_av_instance,
    device_property_audio_source,
    device_property_le_audio_broadcast_config,
    device_property_le_audio_unicast_config,
    device_property_le_audio_volume_config,
    device_property_le_audio_pacs_config,
    device_property_le_audio_csip_config,
    device_property_excludelist,
    device_property_hfp_instance,
    device_property_voice_source,
    device_property_voice_volume,
    device_property_hfp_mic_gain,
    device_property_va_flags,
    device_property_va_locale,
    device_property_pskeys,
    device_property_v1_handset_service_config,
    device_property_analog_audio_volume,
    device_property_upgrade_transport_connected,
    device_property_aghfp_instance,
    device_property_media_control_client,
    device_property_call_control_client,
    device_property_ui_user_gesture,
    device_property_audio_status,
    device_property_disconnected_for_sass_barge_in,
    device_property_handset_ble_context,
    device_property_handset_bredr_context,
    device_property_handset_account_key_index,
    device_property_tmap_client,
    device_property_le_voice_source,
    device_property_sass_switch_disabled,
    device_property_gatt_service_discovery,
    device_property_random_tp_bdaddr,
    device_property_handset_service_config,
    device_property_google_finder,
    device_property_google_finder_location_tracking_disabled,
    device_property_le_audio_micp_config,
    device_property_le_audio_source,
    device_property_qss_server_config,
#ifdef INCLUDE_GBSS
    device_property_generic_broadcast_scan_config,
#endif
    /* Add new properties above 
       Also see note at head of file */
    device_property_max_num,

    /* Device property indexes 0x1000~0xFFFF reserved for customer use */
    device_property_customer_specific_properties_start = 0x1000,
    device_property_customer_specific_properties_max

} earbud_device_property_t;

bdaddr DeviceProperties_GetBdAddr(device_t device);

void DeviceProperties_SetBdAddr(device_t device, bdaddr *bd_addr);

void DeviceProperties_SanitiseBdAddr(bdaddr *bd_addr);

/*! \brief Get the audio source for a device.
    \param device The requested device.
    \return The audio source, or audio_source_none, if a source was not set for
    the device.
*/
audio_source_t DeviceProperties_GetAudioSource(device_t device);

/*! \brief Get the voice source for a device.
    \param device The requested device.
    \return The voice source, or voice_source_none, if a source was not set for
    the device.
*/
voice_source_t DeviceProperties_GetVoiceSource(device_t device);

/*! \brief Set the audio source for a device.
    \param device The device.
    \param source The audio source.
*/
void DeviceProperties_SetAudioSource(device_t device, audio_source_t source);

/*! \brief Set the voice source for a device.
    \param device The device.
    \param source The voice source.
*/
void DeviceProperties_SetVoiceSource(device_t device, voice_source_t source);

/*! \brief Remove the audio source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveAudioSource(device_t device);

/*! \brief Remove the voice source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveVoiceSource(device_t device);

/*! \brief Set the audio volume for a device.

    The input volume_t will be converted to the range used for the audio
    volume property before it is set.

    \param[in] device The device.
    \param[in] volume The audio volume.

    \return TRUE if the property was set; FALSE otherwise.
*/
bool DeviceProperties_SetAudioVolume(device_t device, volume_t volume);

/*! \brief Get the audio volume for a device.

    The given config is used to convert from the raw volume value stored in the
    device audio property to the volume returned from this function.

    If the audio property does not exist for the given device_t the output
    volume will not be modified and the function will return FALSE.

    \param[in] device The device.
    \param[in] config The volume config to use when converting the stored
                      volume to the output volume.
    \param[out] volume The volume read from the device property and
                       converted to the given volume config range.

    \return TRUE if the audio volume property exists and can be read,
            FALSE otherwise.
*/
bool DeviceProperties_GetAudioVolume(device_t device, volume_config_t config, volume_t *volume);

/*! \brief Set the voice volume for a device.

    The input volume_t will be converted to the range used for the voice
    volume property before it is set.

    \param[in] device The device.
    \param[in] volume The voice volume.

    \return TRUE if the property was set; FALSE otherwise.
*/
bool DeviceProperties_SetVoiceVolume(device_t device, volume_t volume);

/*! \brief Get the voice volume for a device.

    The given config is used to convert from the raw volume value stored in the
    device voice property to the volume returned from this function.

    If the voice property does not exist for the given device_t the input
    volume will not be modified and the function will return FALSE.

    \param[in] device The device.
    \param[in] config The volume config to use when converting the stored
                      volume to the output volume.
    \param[out] volume The volume read from the device property and
                       converted to the given volume config range.

    \return TRUE if the voice volume property exists and can be read,
            FALSE otherwise.
*/
bool DeviceProperties_GetVoiceVolume(device_t device, volume_config_t config, volume_t *volume);

/*! \brief Set the current handset context of a device

    \param context The current context of the handset.
*/
void DeviceProperties_SetHandsetBredrContext(device_t device, handset_bredr_context_t context);

/*! \brief Get the current handset context of a device

    \return The current context of the handset.
*/
handset_bredr_context_t DeviceProperties_GetHandsetBredrContext(device_t device);

/*! \brief Get the LE voice source for a device.
    \param device The requested device.

    \return The voice source, or voice_source_none, if a source was not set for
    the device.
*/
voice_source_t DeviceProperties_GetLeVoiceSource(device_t device);

/*! \brief Get the LE audio source for a device.
    \param device The requested device.

    \return The audio source, or audio_source_none, if a source was not set for
    the device.
*/
audio_source_t DeviceProperties_GetLeAudioSource(device_t device);

/*! \brief Set the LE voice source for a device.
    \param device The device.
    \param source The voice source.
*/
void DeviceProperties_SetLeVoiceSource(device_t device, voice_source_t source);

/*! \brief Set the LE audio source for a device.
    \param device The device.
    \param source The audio source.
*/
void DeviceProperties_SetLeAudioSource(device_t device, audio_source_t source);

/*! \brief Remove the LE voice source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveLeVoiceSource(device_t device);

/*! \brief Remove the LE audio source property for a device.
    \param device The device.
*/
void DeviceProperties_RemoveLeAudioSource(device_t device);

/*! \brief Check if upgrade transport is connected to a device
    \param device The requested device.

    \return TRUE if upgrade is connected, otherwise FALSE
*/
bool DeviceProperties_IsUpgradeTransportConnected(device_t device);

/*! \brief Check if a device is the Most Recently Used handset
    \param device The requested device.

    \return TRUE if the device is most recently used, otherwise FALSE
*/
bool DeviceProperties_DeviceIsMruHandset(device_t device);

/*! \brief Get the current ble handset context of a device

    \return The current ble context of the handset.
*/
handset_ble_context_t DeviceProperties_GetHandsetBleContext(device_t device);

/*! \brief Set the current ble handset context of a device

    \param context The current ble context of the handset.
*/
void DeviceProperties_SetHandsetBleContext(device_t device, handset_ble_context_t context);

/*! @} */

#endif /* DEVICE_PROPERTIES_H_ */
