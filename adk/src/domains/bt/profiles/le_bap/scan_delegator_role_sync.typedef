<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (c) 2020 Qualcomm Technologies International, Ltd.-->

<types name="scan_delegator_role_sync" standalone="true">

    <inherit header="marshal_common.h" count="NUMBER_OF_COMMON_MARSHAL_OBJECT_TYPES" x_macro_table="MARSHAL_COMMON_TYPES_TABLE"/>

    <include_header name="scan_delegator_role.h"/>
    <include_header name="gatt_bass_server.h"/>
    <include_header name="panic.h"/>

    <typedef_header_source>
<![CDATA[
#define MARSHAL_TYPE_le_bm_pa_sync_t MARSHAL_TYPE_uint8
]]>
    </typedef_header_source>

    <source>
<![CDATA[
#include "domain_marshal_types.h"

#ifndef HOSTED_TEST_ENVIRONMENT
COMPILE_TIME_ASSERT(sizeof(le_bm_pa_sync_t) == sizeof(uint8), le_bm_pa_sync_t_uint8_mismatched);
#endif

#ifndef HOSTED_TEST_ENVIRONMENT
/* The sync structures need to match the size and layout of the equivalent scan delegator client structures as the
   non-dynamic array members of the structures are copied directly.
   The only different between the sync structures and the equivalent scan delegator client structures is that
   the sync structures are a single allocation of dynamic length, whereas the scan delegator client structures
   have a seperate allocation for the dynamic length metadata/code fields. The peer signalling marshal
   interface requires the objects to be a single allocated.

   The following assertions check for structure equivalence. If a mismatch is found
   the structures in this file should be updated to match the equivalent ones.
*/
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, pa_sync) == offsetof(scan_delegator_client_add_broadcast_source_t, pa_sync), scan_delegator_sync_add_broadcast_source_t_mismatched_pa_sync);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, advertiser_address) == offsetof(scan_delegator_client_add_broadcast_source_t, advertiser_address), scan_delegator_sync_add_broadcast_source_t_mismatched_advertiser_address);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, broadcast_id) == offsetof(scan_delegator_client_add_broadcast_source_t, broadcast_id), scan_delegator_sync_add_broadcast_source_t_mismatched_broadcast_id);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, source_adv_sid) == offsetof(scan_delegator_client_add_broadcast_source_t, source_adv_sid), scan_delegator_sync_add_broadcast_source_t_mismatched_source_adv_sid);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, pa_interval) == offsetof(scan_delegator_client_add_broadcast_source_t, pa_interval), scan_delegator_sync_add_broadcast_source_t_mismatched_pa_interval);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, assistant_address) == offsetof(scan_delegator_client_add_broadcast_source_t, assistant_address), scan_delegator_sync_add_broadcast_source_t_mismatched_assistant_address);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_add_broadcast_source_t, num_subgroups) == offsetof(scan_delegator_client_add_broadcast_source_t, num_subgroups), scan_delegator_sync_add_broadcast_source_t_mismatched_num_sub_groups);

COMPILE_TIME_ASSERT(sizeof(scan_delegator_sync_remove_broadcast_source_t) == sizeof(scan_delegator_client_remove_broadcast_source_t), scan_delegator_sync_remove_broadcast_source_t_mismatched);

COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_modify_broadcast_source_t, source_id) == offsetof(scan_delegator_client_modify_broadcast_source_t, source_id), scan_delegator_sync_modify_broadcast_source_t_mismatched_source_id);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_modify_broadcast_source_t, pa_sync) == offsetof(scan_delegator_client_modify_broadcast_source_t, pa_sync), scan_delegator_sync_modify_broadcast_source_t_mismatched_pa_sync);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_modify_broadcast_source_t, pa_interval) == offsetof(scan_delegator_client_modify_broadcast_source_t, pa_interval), scan_delegator_sync_modify_broadcast_source_t_mismatched_pa_interval);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_modify_broadcast_source_t, assistant_address) == offsetof(scan_delegator_client_modify_broadcast_source_t, assistant_address), scan_delegator_sync_modify_broadcast_source_t_mismatched_assistant_address);
COMPILE_TIME_ASSERT(offsetof(scan_delegator_sync_modify_broadcast_source_t, num_subgroups) == offsetof(scan_delegator_client_modify_broadcast_source_t, num_subgroups), scan_delegator_sync_modify_broadcast_source_t_mismatched_num_sub_groups);

#endif

static uint32 leBapScanDelegator_GetAddBroadcastSourceSubGroupsArrayElements(
                    const void *parent,
                    const marshal_member_descriptor_t *member_descriptor,
                    uint32 array_element)
{
    const scan_delegator_sync_add_broadcast_source_t *obj = parent;

    PanicFalse(obj && member_descriptor);
    PanicFalse(array_element == 0);
    PanicFalse(member_descriptor->offset == offsetof(scan_delegator_sync_add_broadcast_source_t, subgroups));

    return obj->subgroups_length;
}

static uint32 leBapScanDelegator_GetModifyBroadcastSourceSubGroupsArrayElements(
                    const void *parent,
                    const marshal_member_descriptor_t *member_descriptor,
                    uint32 array_element)
{
    const scan_delegator_sync_modify_broadcast_source_t *obj = parent;

    PanicFalse(obj && member_descriptor);
    PanicFalse(array_element == 0);
    PanicFalse(member_descriptor->offset == offsetof(scan_delegator_sync_modify_broadcast_source_t, subgroups));

    return obj->subgroups_length;
}
]]>
    </source>

    <typedef_struct name="scan_delegator_sync_add_broadcast_source_t" has="dynamic_array" array_elements_cb="leBapScanDelegator_GetAddBroadcastSourceSubGroupsArrayElements" doc="">
        <member marshal="true" doc="">le_bm_pa_sync_t pa_sync</member>
        <member marshal="true" doc="">typed_bdaddr advertiser_address</member>
        <member marshal="true" doc="">uint32 broadcast_id</member>
        <member marshal="true" doc="">uint8 source_adv_sid</member>
        <member marshal="true" doc="">uint16 pa_interval</member>
        <member marshal="true" doc="">typed_bdaddr assistant_address</member>
        <member marshal="true" doc="">uint8 num_subgroups</member>
        <member marshal="true" doc="">uint8 subgroups_length</member>
        <member marshal="true" doc="">uint8 subgroups[1]</member>
    </typedef_struct>

    <typedef_struct name="scan_delegator_sync_remove_broadcast_source_t" doc="">
        <member marshal="true" doc="">uint8 source_id</member>
    </typedef_struct>

    <typedef_struct name="scan_delegator_sync_modify_broadcast_source_t" has="dynamic_array" array_elements_cb="leBapScanDelegator_GetModifyBroadcastSourceSubGroupsArrayElements" doc="">
        <member marshal="true" doc="">uint8 source_id</member>
        <member marshal="true" doc="">le_bm_pa_sync_t pa_sync</member>
        <member marshal="true" doc="">uint16 pa_interval</member>
        <member marshal="true" doc="">typed_bdaddr assistant_address</member>
        <member marshal="true" doc="">uint8 num_subgroups</member>
        <member marshal="true" doc="">uint8 subgroups_length</member>
        <member marshal="true" doc="">uint8 subgroups[1]</member>
    </typedef_struct>

    <typedef_struct name="scan_delegator_sync_broadcast_code_t" doc="">
        <member marshal="true" doc="">uint8 source_id</member>
        <member marshal="true" doc="">uint8 broadcast_code[SCAN_DELEGATOR_BROADCAST_CODE_SIZE]</member>
    </typedef_struct>

</types>
