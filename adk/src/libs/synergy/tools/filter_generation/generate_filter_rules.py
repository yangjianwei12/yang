# --------------------------------------------------------------------------------------------------
# Copyright (c) 2023 Qualcomm Technologies International, Ltd
# --------------------------------------------------------------------------------------------------
#
# This script parses the filter_flags.csv file and updates the cleanup rules which are required
# for the SI to filter certain code from getting released.
#
# Usage:
# 1. Running the Script: the script runs like any other python scripts by calling below commands:
#    python <path_to_script> or py <path_to_script>
# 2. Output of the script: this script updates the file gen_filter.yaml which is located at
#                          adk/src/libs/synergy/private/config/cleanup/gen_filter.yaml with the
#                          required rules based on the filter_flags.csv. These rules will be
#                          used for SI generation. Refer to file filter_flags.csv to understand
#                          more on defining rules for flags.
# --------------------------------------------------------------------------------------------------
import csv
import logging
import os
import sys

FLAG_INDEX = 0
OPTION_INDEX = 1

tab_with_spaces = '    '
enter = "\n"
def_content = """- rule_type: clean_ifdef
  rule_data:
    keep_content: else
    paths:
    - \"adk/src/libs/synergy/**/*.h\"
    - \"adk/src/libs/synergy/**/*.c\"
    defs:"""
ndef_content = """- rule_type: clean_ifndef
  rule_data:
    keep_content: else
    paths:
    - \"adk/src/libs/synergy/**/*.h\"
    - \"adk/src/libs/synergy/**/*.c\"
    defs:"""
def_flags = ''
ndef_flags = ''
filter_header = 'cleanup_rules:'
disclaimer = '# This is an autogenerated file generated using adk/src/libs/synergy/tools/filter_generation/generate_filter_rules.py, please do not edit directly.'
disclaimer += enter + '# Please refer to the mentioned script file for the usage.'
filter_content = disclaimer
filter_file_path = os.path.join(os.path.dirname(__file__), '../../private/config/cleanup/gen_filter.yaml')
index = 0
filter_file_name = 'filter_flags.csv'


def script_exit():
    db_file.close()
    sys.exit(0)


try:
    with open(filter_file_name, 'r') as db_file:
        db_read = csv.reader(filter(lambda row: row[0] != '#', db_file))
        for entry in db_read:
            if len(entry) == 2:
                if entry[OPTION_INDEX] == 'DEFINED':
                    def_flags += tab_with_spaces + "- " + entry[FLAG_INDEX] + enter
                elif entry[OPTION_INDEX] == 'NOT_DEFINED':
                    ndef_flags += tab_with_spaces + "- " + entry[FLAG_INDEX] + enter
                else:
                    print('Invalid option field: ' + entry[OPTION_INDEX] + ' on entry number-' + str(
                        index + 1) + '. Please check ' + filter_file_name)
                    script_exit()
            else:
                print('Wrong size entry number-' + str(index + 1) + ' detected with length=' + str(
                    len(entry)) + '. Please check ' + filter_file_name)
                script_exit()
            index += 1
        if index > 0:
            filter_content += enter + filter_header + enter
            if def_flags != '':
                def_content += enter + def_flags
                filter_content += def_content
            if ndef_flags != '':
                ndef_content += enter + ndef_flags
                filter_content += ndef_content
            print('Successfully generated rules, written to ' + filter_file_path)
        else:
            print('Filter database empty, no rules are generated. Please check ' + filter_file_name)
            script_exit()
        db_file.close()
        try:
            with open(filter_file_path, 'w') as filter_file:
                filter_file.write(filter_content)
                filter_file.close()
        except IOError as e:
            logging.exception('Unable to open file ' + filter_file_path)
except FileNotFoundError as e:
    logging.exception(
        'Filter Database file not found, check if filter_flags.csv is present at adk/src/libs/synergy/tools/filter_generation')
except IOError as e:
    logging.exception('Unable to open file adk/src/libs/synergy/tools/filter_generation/filter_flags.csv')
