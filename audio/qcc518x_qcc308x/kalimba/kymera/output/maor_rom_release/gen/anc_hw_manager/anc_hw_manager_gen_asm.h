// -----------------------------------------------------------------------------
// Copyright (c) 2023                  Qualcomm Technologies International, Ltd.
//
// Generated by /home/svc-audio-dspsw/kymera_builds/builds/2023/kymera_2312060823/kalimba/kymera/../../util/CommonParameters/DerivationEngine.py
// code v3.5, file //depot/dspsw/maor_rom_v20/util/CommonParameters/DerivationEngine.py, revision 2
// namespace {com.csr.cps.4}UnifiedParameterSchema on 2023-12-06 08:48:58 by svc-audio-dspsw
//
// input from EMPTY
// last change  by  on 
// -----------------------------------------------------------------------------
#ifndef __ANC_HW_MANAGER_GEN_ASM_H__
#define __ANC_HW_MANAGER_GEN_ASM_H__

// CodeBase IDs
.CONST $M.ANC_HW_MANAGER_ANC_HW_MANAGER_CAP_ID       	0x00D7;
.CONST $M.ANC_HW_MANAGER_ANC_HW_MANAGER_ALT_CAP_ID_0       	0x40B8;
.CONST $M.ANC_HW_MANAGER_ANC_HW_MANAGER_SAMPLE_RATE       	0;
.CONST $M.ANC_HW_MANAGER_ANC_HW_MANAGER_VERSION_MAJOR       	3;

// Constant Values
.CONST $M.ANC_HW_MANAGER.CONSTANT.IN_OUT_EAR_CTRL            		0x00000003;
.CONST $M.ANC_HW_MANAGER.CONSTANT.CHANNEL_CTRL               		0x00000004;
.CONST $M.ANC_HW_MANAGER.CONSTANT.FEEDFORWARD_CTRL           		0x00000005;
.CONST $M.ANC_HW_MANAGER.CONSTANT.AMBIENT_CTRL               		0x00000006;
.CONST $M.ANC_HW_MANAGER.CONSTANT.TRIGGER_CTRL               		0x00000007;
.CONST $M.ANC_HW_MANAGER.CONSTANT.FF_COARSE_GAIN_CTRL        		0x0000000A;
.CONST $M.ANC_HW_MANAGER.CONSTANT.FF_FINE_GAIN_CTRL          		0x0000000B;
.CONST $M.ANC_HW_MANAGER.CONSTANT.FB_COARSE_GAIN_CTRL        		0x0000000C;
.CONST $M.ANC_HW_MANAGER.CONSTANT.FB_FINE_GAIN_CTRL          		0x0000000D;
.CONST $M.ANC_HW_MANAGER.CONSTANT.EC_COARSE_GAIN_CTRL        		0x0000000E;
.CONST $M.ANC_HW_MANAGER.CONSTANT.EC_FINE_GAIN_CTRL          		0x0000000F;
.CONST $M.ANC_HW_MANAGER.CONSTANT.RX_FFA_MIX_COARSE_GAIN_CTRL		0x00000010;
.CONST $M.ANC_HW_MANAGER.CONSTANT.RX_FFA_MIX_FINE_GAIN_CTRL  		0x00000011;
.CONST $M.ANC_HW_MANAGER.CONSTANT.RX_FFB_MIX_COARSE_GAIN_CTRL		0x00000012;
.CONST $M.ANC_HW_MANAGER.CONSTANT.RX_FFB_MIX_FINE_GAIN_CTRL  		0x00000013;


// Piecewise Disables
// AHM_CONFIG bits
.CONST $M.ANC_HW_MANAGER.CONFIG.AHM_CONFIG.DISABLE_ANC_CLOCK_CHECK   		0x00000001;
.CONST $M.ANC_HW_MANAGER.CONFIG.AHM_CONFIG.DISABLE_EAR_CHECK         		0x00000002;
.CONST $M.ANC_HW_MANAGER.CONFIG.AHM_CONFIG.DISABLE_FF_GAIN_ADJUSTMENT		0x00000004;
.CONST $M.ANC_HW_MANAGER.CONFIG.AHM_CONFIG.DISABLE_SOURCE_FF_RAMP    		0x00000010;
.CONST $M.ANC_HW_MANAGER.CONFIG.AHM_CONFIG.DISABLE_SOURCE_FB_RAMP    		0x00000020;


// Statistic Block
.CONST $M.ANC_HW_MANAGER.STATUS.CUR_MODE                   		0*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.OVR_CONTROL                		1*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.IN_OUT_EAR_CTRL            		2*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.CHANNEL                    		3*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.TRIGGER                    		4*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FEEDFORWARD_PATH           		5*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.AMBIENT_CTRL               		6*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FLAGS                      		7*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FF_COARSE_GAIN_CTRL        		8*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FF_FINE_GAIN_CTRL          		9*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FF_GAIN_DB                 		10*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FB_COARSE_GAIN_CTRL        		11*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FB_FINE_GAIN_CTRL          		12*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FB_GAIN_DB                 		13*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.EC_COARSE_GAIN_CTRL        		14*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.EC_FINE_GAIN_CTRL          		15*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.EC_GAIN_DB                 		16*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFA_MIX_COARSE_GAIN_CTRL		17*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFA_MIX_FINE_GAIN_CTRL  		18*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFA_MIX_GAIN_DB         		19*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFB_MIX_COARSE_GAIN_CTRL		20*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFB_MIX_FINE_GAIN_CTRL  		21*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.RX_FFB_MIX_GAIN_DB         		22*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.FF_FINE_GAIN_CTRL_INST1    		23*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.STATUS.BLOCK_SIZE                      	24;

// System Mode
.CONST $M.ANC_HW_MANAGER.SYSMODE.STANDBY          		0;
.CONST $M.ANC_HW_MANAGER.SYSMODE.MUTE_ANC         		1;
.CONST $M.ANC_HW_MANAGER.SYSMODE.FULL             		2;
.CONST $M.ANC_HW_MANAGER.SYSMODE.STATIC           		3;
.CONST $M.ANC_HW_MANAGER.SYSMODE.QUIET            		4;
.CONST $M.ANC_HW_MANAGER.SYSMODE.WINDY            		5;
.CONST $M.ANC_HW_MANAGER.SYSMODE.FILTER_TRANSITION		6;
.CONST $M.ANC_HW_MANAGER.SYSMODE.MAX_MODES        		7;

// System Control
.CONST $M.ANC_HW_MANAGER.CONTROL.MODE_OVERRIDE		0x2000;

// In/Out of Ear Status
.CONST $M.ANC_HW_MANAGER.IN_OUT_EAR_CTRL.IN_EAR 		0x0001;
.CONST $M.ANC_HW_MANAGER.IN_OUT_EAR_CTRL.OUT_EAR		0x0000;

// Selected Channel
.CONST $M.ANC_HW_MANAGER.CHANNEL.ANC0		0x0001;
.CONST $M.ANC_HW_MANAGER.CHANNEL.ANC1		0x0002;
.CONST $M.ANC_HW_MANAGER.CHANNEL.eANC		0x0003;

// TRIGGER
.CONST $M.ANC_HW_MANAGER.TRIGGER.START    		0x0000;
.CONST $M.ANC_HW_MANAGER.TRIGGER.SIMILAR  		0x0001;
.CONST $M.ANC_HW_MANAGER.TRIGGER.DIFFERENT		0x0002;

// Selected Path
.CONST $M.ANC_HW_MANAGER.FEEDFORWARD_PATH.FFA		0x0001;
.CONST $M.ANC_HW_MANAGER.FEEDFORWARD_PATH.FFB		0x0002;

// Ambient Control
.CONST $M.ANC_HW_MANAGER.AMBIENT_CTRL.AANC		0x00000000;
.CONST $M.ANC_HW_MANAGER.AMBIENT_CTRL.AAMB		0x00000001;

// Flags
.CONST $M.ANC_HW_MANAGER.FLAGS.CLOCK_CHECK_STATUS		0x00000001;

// ANC FF Coarse Gain

// ANC FF Fine Gain

// ANC FB Coarse Gain

// ANC FB Fine Gain

// ANC EC Coarse Gain

// ANC EC Fine Gain

// ANC Rx FFA Mix  Coarse Gain

// ANC Rx FFA Mix Fine Gain

// ANC Rx FFB Mix Coarse Gain

// ANC Rx FFB Mix Fine Gain

// ANC FF Fine Gain

// Parameter Block
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_AHM_CONFIG               		0*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_AHM_FF_RAMP_PRIORITY     		1*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_AHM_FB_RAMP_PRIORITY     		2*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_MUTE_RAMP_DURATION       		3*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_QUIET_FF_RAMP_DURATION   		4*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_QUIET_FB_RAMP_DURATION   		5*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_WINDY_FF_RAMP_DURATION   		6*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_WINDY_FB_RAMP_DURATION   		7*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FF_RAMP_DURATION         		8*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FB_RAMP_DURATION         		9*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FB_RAMP_DELAY_TIMER      		10*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_OVERRIDE_RAMP_DURATION   		11*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_QUIET_MODE_FF_FINE_GAIN  		12*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_QUIET_MODE_FB_FINE_GAIN  		13*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_WINDY_MODE_FF_FINE_GAIN  		14*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_WINDY_MODE_FB_FINE_GAIN  		15*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FAST_RAMP_DOWN_DURATION  		16*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FAST_RAMP_UP_DURATION    		17*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_FAST_MODE_DELAY_DURATION 		18*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_SLOW_RAMP_DOWN_DURATION  		19*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_SLOW_RAMP_UP_DURATION    		20*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_SLOW_MODE_DELAY_DURATION 		21*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.OFFSET_START_MODE_DELAY_DURATION		22*ADDR_PER_WORD;
.CONST $M.ANC_HW_MANAGER.PARAMETERS.STRUCT_SIZE                    		23;


#endif // __ANC_HW_MANAGER_GEN_ASM_H__
