// -----------------------------------------------------------------------------
// Copyright (c) 2023                  Qualcomm Technologies International, Ltd.
//
// Generated by /home/svc-audio-dspsw/kymera_builds/builds/2023/kymera_2312060823/kalimba/kymera/../../util/CommonParameters/DerivationEngine.py
// code v3.5, file //depot/dspsw/maor_rom_v20/util/CommonParameters/DerivationEngine.py, revision 2
// namespace {com.csr.cps.4}UnifiedParameterSchema on 2023-12-06 08:54:53 by svc-audio-dspsw
//
// input from EMPTY
// last change  by  on 
// -----------------------------------------------------------------------------
#ifndef __WIND_NOISE_DETECT_GEN_ASM_H__
#define __WIND_NOISE_DETECT_GEN_ASM_H__

// CodeBase IDs
.CONST $M.WIND_NOISE_DETECT_WIND_NOISE_DETECT_CAP_ID       	0x00DF;
.CONST $M.WIND_NOISE_DETECT_WIND_NOISE_DETECT_ALT_CAP_ID_0       	0x40C0;
.CONST $M.WIND_NOISE_DETECT_WIND_NOISE_DETECT_SAMPLE_RATE       	16000;
.CONST $M.WIND_NOISE_DETECT_WIND_NOISE_DETECT_VERSION_MAJOR       	1;

// Constant Values
.CONST $M.WIND_NOISE_DETECT.CONSTANT.INTENSITY_UPDATE_CTRL		0x00000002;


// Piecewise Disables
// WND_CONFIG bits
.CONST $M.WIND_NOISE_DETECT.CONFIG.WND_CONFIG.2MIC_ONLY		0x00000001;


// Statistic Block
.CONST $M.WIND_NOISE_DETECT.STATUS.CUR_MODE   		0*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.OVR_CONTROL		1*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.POWER      		2*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.DETECTION  		3*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.INTENSITY  		4*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.EVENT_STATE		5*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.STATUS.BLOCK_SIZE      	6;

// System Mode
.CONST $M.WIND_NOISE_DETECT.SYSMODE.STANDBY		0;
.CONST $M.WIND_NOISE_DETECT.SYSMODE.1MIC   		2;
.CONST $M.WIND_NOISE_DETECT.SYSMODE.2MIC   		3;
.CONST $M.WIND_NOISE_DETECT.SYSMODE.MAX_MODES		4;

// System Control
.CONST $M.WIND_NOISE_DETECT.CONTROL.MODE_OVERRIDE		0x2000;

// Detection
.CONST $M.WIND_NOISE_DETECT.DETECTION.1MIC_WIND		0x00000001;
.CONST $M.WIND_NOISE_DETECT.DETECTION.2MIC_WIND		0x00000002;

// Intensity
.CONST $M.WIND_NOISE_DETECT.INTENSITY.NONE  		0x00000000;
.CONST $M.WIND_NOISE_DETECT.INTENSITY.LOW   		0x00000001;
.CONST $M.WIND_NOISE_DETECT.INTENSITY.MEDIUM		0x00000002;
.CONST $M.WIND_NOISE_DETECT.INTENSITY.HIGH  		0x00000003;

// Event State
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.RELEASE        		0x00000000;
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.ATTACK_COUNT   		0x00000001;
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.ATTACK_MESSAGE 		0x00000002;
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.ATTACK         		0x00000003;
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.RELEASE_COUNT  		0x00000004;
.CONST $M.WIND_NOISE_DETECT.EVENT_STATE.RELEASE_MESSAGE		0x00000005;

// Parameter Block
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_WND_CONFIG                  		0*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_1MIC_FILTER_ATTACK          		1*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_1MIC_FILTER_DECAY           		2*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_1MIC_THRESHOLD              		3*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_1MIC_MESSAGE_ATTACK         		4*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_1MIC_MESSAGE_RELEASE        		5*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_2MIC_FILTER_ATTACK          		6*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_2MIC_FILTER_DECAY           		7*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_2MIC_THRESHOLD              		8*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_2MIC_MESSAGE_ATTACK         		9*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_2MIC_MESSAGE_RELEASE        		10*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_POWER_THRESHOLD             		11*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_POWER_ENVELOPE_TIME         		12*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_POWER_ATTACK_TIME           		13*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MED_WIND_THRESHOLD          		14*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_WIND_THRESHOLD         		15*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MED_REL_WIND_THRESHOLD      		16*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_REL_WIND_THRESHOLD     		17*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_LOW_WIND_FF_RAMP_DURATION   		18*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_LOW_WIND_FB_RAMP_DURATION   		19*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_LOW_WIND_FF_FINE_GAIN       		20*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_LOW_WIND_FB_FINE_GAIN       		21*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MEDIUM_WIND_FF_RAMP_DURATION		22*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MEDIUM_WIND_FB_RAMP_DURATION		23*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MEDIUM_WIND_FF_FINE_GAIN    		24*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_MEDIUM_WIND_FB_FINE_GAIN    		25*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_WIND_FF_RAMP_DURATION  		26*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_WIND_FB_RAMP_DURATION  		27*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_WIND_FF_FINE_GAIN      		28*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.OFFSET_HIGH_WIND_FB_FINE_GAIN      		29*ADDR_PER_WORD;
.CONST $M.WIND_NOISE_DETECT.PARAMETERS.STRUCT_SIZE                       		30;


#endif // __WIND_NOISE_DETECT_GEN_ASM_H__
