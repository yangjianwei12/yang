############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2011 - 2021 Qualcomm Technologies International, Ltd.
#
############################################################################
#
# COMPONENT:    Kymera build system
# MODULE:       Helper files
# DESCRIPTION:  Common make fragment to define position of other components
#
############################################################################

#########################################################################
# OS Detection and Path manipulation for different build platforms
#########################################################################
ifeq ($(origin OSTYPE),undefined)
    $(info OSTYPE undefined.)
    $(info Either define it on the command line or as an environment variable)
    $(info Valid values are Windows_NT, linux)
    $(info e.g. make CONFIG=stre_rom OSTYPE=Windows_NT)
    $(error Undefined operating system type - exiting)
endif

ifneq ($(findstring Windows_NT, $(OSTYPE)), )
    # Windows NT , so call into the Python path-converter
    # $(info OSTYPE PARAMETER IS WINDOWS NT)
else ifneq ($(findstring linux, $(OSTYPE)), )
    # Linux, so leave the path unmangled
    # $(info OS TYPE PARAMETER IS LINUX )
else
    $(info ERROR: Unknown operating system OSTYPE: $(OSTYPE))
    $(info Either define it on the command line or as an environment variable)
    $(info Valid values are Windows_NT, linux)
    $(info e.g. make CONFIG=stre_rom OSTYPE=Windows_NT)
    $(error  )
endif

#########################################################################
# System-wide tools
#########################################################################

# Note on "ospath" usage:
# The makefile itself (targets and prerequisites) uses Unix path syntax
# (forward slash) regardless of the platform it's running on.
# The recipes in rules use $(call ospath) to translate this to the host
# OS's convention (i.e., backslash on Windows) as needed, so that the
# commands that are run see native path separators.
# (Some of the tools we use accept Unix path syntax even on Windows, so
# you might not see "ospath" used in all the places you would expect.)

ifeq ("$(OSTYPE)","Windows_NT")
ifeq "$(UBUILD_PYTHON_VER)" "3"
  PYTHON=python
else
  PYTHON=$(DEVKIT_ROOT)\tools\python27\python.exe
endif
CPP = $(DEVKIT_ROOT)\tools\bin\xap-local-xap-cpp.exe
SED = $(DEVKIT_ROOT)\tools\bin\sed
CAT = $(DEVKIT_ROOT)\tools\bin\cat
COPY = copy
RM = del
RM_F = del /q /f
RM_R = del /s
RM_RF = del /s /q /f
MKDIR = mkdir
MKDIR_P = mkdir
STDOUT_DEV_NULL = 1> nul
STDERR_DEV_NULL = 2> nul
STDOUT_STDERR_DEV_NULL = > nul 2>&1
DEV_NULL = nul
TRUE = $(eval TEMP_UNUSED_VAR_FOR_TRUE_=0)
#
define utouch
copy /b $1 +,, $1 $(STDOUT_DEV_NULL)
endef
#
# calling out to python is expensive, so do inline if we can
# not sure why we need to get rif of the trailing \, but do so.
# Anything with an embedded .. still calls winpath.
CHUNK_SIZE := 100
define ospathloop
$(if $(findstring ..,$(patsubst ..%,%,$(wordlist 1,$(CHUNK_SIZE),$1))),$(shell $(PYTHON) $(BUILD_ROOT)/winpath.py $(wordlist 1,$(CHUNK_SIZE),$1)),$(patsubst %\,%,$(subst /,\,$(wordlist 1,$(CHUNK_SIZE),$1)))) \
$(if $(filter-out $(wordlist 1,$(CHUNK_SIZE),$1),$1),$(call ospath,$(filter-out $(wordlist 1,$(CHUNK_SIZE),$1),$1)),)
endef

define ospath
$(strip $(call ospathloop,$1))
endef

# Convert the paths in $2 to paths relative to $1. If $1 is empty, then
# make the paths in $2 relative to the current working directory.
define relpathloop
$(if $1,$(shell $(PYTHON) $(BUILD_ROOT)/winrelpath.py -r $1 $(wordlist 1,$(CHUNK_SIZE),$2)),$(shell $(PYTHON) $(BUILD_ROOT)/winrelpath.py $(wordlist 1,$(CHUNK_SIZE),$2))) \
$(if $(filter-out $(wordlist 1,$(CHUNK_SIZE),$2),$2),$(call relpath,$1,$(filter-out $(wordlist 1,$(CHUNK_SIZE),$2),$2)),)
endef

define relpath
$(strip $(call relpathloop,$1,$2))
endef

# Define a function to generate the relative header paths (relative to the current working directory (CWD))
# $(1): target, $(2): $(H_PATH)
define GEN_REL_PATH
$(eval TEMP_FILE := $(call ospath,$(1)_tmp_paths.txt))\
$(file > $(TEMP_FILE),$(2))\
$(shell $(PYTHON) $(BUILD_ROOT)/relpath.py $(TEMP_FILE))\
$(shell $(RM_F) $(TEMP_FILE))
endef

else ifeq ("$(OSTYPE)","linux")
# Determine if executing on internal Linux build systems
directory = /comm
dir_test = $(directory)-$(wildcard $(directory))
dir_present = $(directory)-$(directory)

ifeq ($(dir_test), $(dir_present))
    # $(info - INTERNAL LINUX BUILD SYSTEM)
    internal = true
else
    # $(info - EXTERNAL LINUX BUILD SYSTEM)
endif

ifdef internal
    PYTHON = /comm/python/3.6.2/bin/python3
    export PYTHONPATH = /home/devtools/kal-python-tools/linux/1.1.11/kal_python_tools_linux64_external_1.1.11
else
    PYTHON = python
    $(info VIRTUAL_ENV $(VIRTUAL_ENV))
    $(info PYTHONPATH $(PYTHONPATH))
endif

CPP = cpp
SED = sed
CAT = cat
COPY = cp
RM = rm
RM_F = rm -f
RM_R = rm -r
RM_RF = rm -rf
MKDIR = mkdir
MKDIR_P = mkdir -p
STDOUT_DEV_NULL = 1>/dev/null
STDERR_DEV_NULL = 2>/dev/null
STDOUT_STDERR_DEV_NULL = &> /dev/null
DEV_NULL = /dev/null
TRUE = $(eval TEMP_UNUSED_VAR_FOR_TRUE_=0)
#
define utouch
touch $1
endef
#
define ospath
$1
endef

# Don't convert paths on Linux - just use original paths
# $(1): target, $(2): $(H_PATH)
define GEN_REL_PATH
$2
endef

# Don't convert paths on Linux - just use original paths
# $(1): target, $(2): $(H_PATH)
define relpath
$2
endef

else
$(error OSTYPE is unsupported !!!!)
endif

# Run once for autogen
# Some legacy recipes followed the form $(GEN_HDRS) $(GEN_SRCS): list of dependencies
# which had the potential to run multiple times. once for each target.
# Breaking the dependency is (arguably) messier, so add a function.
# Make use of the fact that recipes with multiple wildcard targets only
# run the recipe once. So substitute the extension separator with a % in all
# targets and we have a run-once rule.
define run_recipe_once
$(subst .,%,$1)
endef


# GNU Make Version detection
# Workaround for GNU make for Win 3.81 bug in abspath (realpath is also broken)
# For Linux builds, just use the built-in abspath
# Usage is: $(call myabspath,<path to mangle>)
ifneq ($(findstring 4.1, $(MAKE_VERSION)), )
#$(info MAKE VERSION IS 4.1)
else ifneq ($(findstring 4.3, $(MAKE_VERSION)), )
#$(info MAKE VERSION IS 4.3)
else ifneq ($(findstring 3.81, $(MAKE_VERSION)), )
#$(info MAKE VERSION IS 3.81)
else
$(info ERROR: UNTESTED MAKE VERSION: $(MAKE_VERSION))
$(info Valid versions are 4.3, 4.1 and 3.81)
$(error  )
endif

ifeq ("$(OSTYPE)","Windows_NT")
ifneq ($(findstring 3.81, $(MAKE_VERSION)), )
myabspath = $(shell $(PYTHON) $(subst /,\,$(BUILD_ROOT)/myabspath.py $(1)))
else ifneq ($(findstring 4., $(MAKE_VERSION)), )
myabspath = $(subst /,\,$(abspath $(1)))
else
myabspath = $(abspath $(1))
endif
else
myabspath = $(abspath $(1))
endif

# Special variable for inserting line breaks in $(info ...) output
define newline


endef
